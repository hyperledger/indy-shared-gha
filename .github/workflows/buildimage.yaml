name: "Build Docker Image"

on:
  workflow_call:
    inputs:
      CACHE_KEY_BUILD:
        required: true
        type: string
      UBUNTU_VERSION:
        required: true
        type: string
      DOCKER_IMAGE:
        required: true
        type: string
jobs:
  build-image:
    name: Create Builder Image
    runs-on: ubuntu-latest
    env:
      CACHE_KEY_BUILD: ${{ inputs.CACHE_KEY_BUILD }}
      UBUNTU_VERSION: ${{ inputs.UBUNTU_VERSION }}
      DOCKER_IMAGE: ${{ inputs.DOCKER_IMAGE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Try load from cache
        id: cache-image
        uses: actions/cache@v3
        with:
          path: ${GITHUB_WORKSPACE}/cache
          key: ${{ env.CACHE_KEY_BUILD }}

      - name: Prepare image labels and tags
        if: steps.cache-image.outputs.cache-hit != 'true'
        id: prep
        shell: bash
        run: |
          TAGS="${DOCKER_IMAGE}:latest,${DOCKER_IMAGE}:${{ env.UBUNTU_VERSION }}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

          echo "::group::DEBUG"
          echo "tags=${TAGS}" 
          echo "created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          echo "::endgroup::"
      - name: Log into the GitHub Container Registry
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v1

      - name: Build and push image
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: .github/workflows/build/Dockerfile.${{ env.UBUNTU_VERSION }}
          no-cache: true
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Touch Cache
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/cache
          touch ${GITHUB_WORKSPACE}/cache/${{ env.CACHE_KEY_BUILD }}